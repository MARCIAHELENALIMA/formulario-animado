/**
 * The list of supported events.
 */
export declare const EVENTS: readonly ["xmldecl", "text", "processinginstruction", "doctype", "comment", "opentagstart", "attribute", "opentag", "closetag", "cdata", "error", "end", "ready"];
/**
 * Event handler for the
 *
 * @param text The text data encountered by the parser.
 *
 */
export declare type XMLDeclHandler = (decl: XMLDecl) => void;
/**
 * Event handler for text data.
 *
 * @param text The text data encountered by the parser.
 *
 */
export declare type TextHandler = (text: string) => void;
/**
 * Event handler for processing instructions.
 *
 * @param data The target and body of the processing instruction.
 */
export declare type PIHandler = (data: {
    target: string;
    body: string;
}) => void;
/**
 * Event handler for doctype.
 *
 * @param doctype The doctype contents.
 */
export declare type DoctypeHandler = (doctype: string) => void;
/**
 * Event handler for comments.
 *
 * @param comment The comment contents.
 */
export declare type CommentHandler = (comment: string) => void;
/**
 * Event handler for the start of an open tag. This is called as soon as we
 * have a tag name.
 *
 * @param tag The tag.
 */
export declare type OpenTagStartHandler<O> = (tag: StartTagForOptions<O>) => void;
export declare type AttributeEventForOptions<O extends SaxesOptions> = O extends {
    xmlns: true;
} ? SaxesAttributeNSIncomplete : O extends {
    xmlns?: false | undefined;
} ? SaxesAttributePlain : SaxesAttribute;
/**
 * Event handler for attributes.
 */
export declare type AttributeHandler<O> = (attribute: AttributeEventForOptions<O>) => void;
/**
 * Event handler for an open tag. This is called when the open tag is
 * complete. (We've encountered the ">" that ends the open tag.)
 *
 * @param tag The tag.
 */
export declare type OpenTagHandler<O> = (tag: TagForOptions<O>) => void;
/**
 * Event handler for a close tag. Note that for self-closing tags, this is
 * called right after ``opentag``.
 *
 * @param tag The tag.
 */
export declare type CloseTagHandler<O> = (tag: TagForOptions<O>) => void;
/**
 * Event handler for a CDATA section. This is called when ending the
 * CDATA section.
 *
 * @param cdata The contents of the CDATA section.
 */
export declare type CDataHandler = (cdata: string) => void;
/**
 * Event handler for the stream end. This is called when the stream has been
 * closed with ``close`` or by passing ``null`` to ``write``.
 */
export declare type EndHandler = () => void;
/**
 * Event handler indicating parser readiness . This is called when the parser
 * is ready to parse a new document.
 */
export declare type ReadyHandler = () => void;
/**
 * Event handler indicating an error.
 *
 * @param err The error that occurred.
 */
export declare type ErrorHandler = (err: Error) => void;
export declare type EventName = (typeof EVENTS)[number];
export declare type EventNameToHandler<O, N extends EventName> = {
    "xmldecl": XMLDeclHandler;
    "text": TextHandler;
    "processinginstruction": PIHandler;
    "doctype": DoctypeHandler;
    "comment": CommentHandler;
    "opentagstart": OpenTagStartHandler<O>;
    "attribute": AttributeHandler<O>;
    "opentag": OpenTagHandler<O>;
    "closetag": CloseTagHandler<O>;
    "cdata": CDataHandler;
    "error": ErrorHandler;
    "end": EndHandler;
    "ready": ReadyHandler;
}[N];
/**
 * This interface defines the structure of attributes when the parser is
 * processing namespaces (created with ``xmlns: true``).
 */
export interface SaxesAttributeNS {
    /**
     * The attribute's name. This is the combination of prefix and local name.
     * For instance ``a:b="c"`` would have ``a:b`` for name.
     */
    name: string;
    /**
     * The attribute's prefix. For instance ``a:b="c"`` would have ``"a"`` for
     * ``prefix``.
     */
    prefix: string;
    /**
     * The attribute's local name. For instance ``a:b="c"`` would have ``"b"`` for
     * ``local``.
     */
    local: string;
    /** The namespace URI of this attribute. */
    uri: string;
    /** The attribute's value. */
    value: string;
}
/**
 * This is an attribute, as recorded by a parser which parses namespaces but
 * prior to the URI being resolvable. This is what is passed to the attribute
 * event handler.
 */
export declare type SaxesAttributeNSIncomplete = Exclude<SaxesAttributeNS, "uri">;
/**
 * This interface defines the structure of attributes when the parser is
 * NOT processing namespaces (created with ``xmlns: false``).
 */
export interface SaxesAttributePlain {
    /**
     * The attribute's name.
     */
    name: string;
    /** The attribute's value. */
    value: string;
}
/**
 * A saxes attribute, with or without namespace information.
 */
export declare type SaxesAttribute = SaxesAttributeNS | SaxesAttributePlain;
/**
 * This are the fields that MAY be present on a complete tag.
 */
export interface SaxesTag {
    /**
     * The tag's name. This is the combination of prefix and global name. For
     * instance ``<a:b>`` would have ``"a:b"`` for ``name``.
     */
    name: string;
    /**
     * A map of attribute name to attributes. If namespaces are tracked, the
     * values in the map are attribute objects. Otherwise, they are strings.
     */
    attributes: Record<string, SaxesAttributeNS> | Record<string, string>;
    /**
     * The namespace bindings in effect.
     */
    ns?: Record<string, string>;
    /**
     * The tag's prefix. For instance ``<a:b>`` would have ``"a"`` for
     * ``prefix``. Undefined if we do not track 